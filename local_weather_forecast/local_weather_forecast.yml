apiVersion: influxdata.com/v2alpha1
kind: Label
metadata:
    name: upbeat-cray-af1003
spec:
    color: '#326BBA'
    name: InfluxDB2
---
apiVersion: influxdata.com/v2alpha1
kind: Label
metadata:
    name: wondrous-carson-af1005
spec:
    color: '#326BBA'
    name: openweathermap
---
apiVersion: influxdata.com/v2alpha1
kind: Bucket
metadata:
    name: clever-stonebraker-2f1001
spec:
    name: openweathermap
---
apiVersion: influxdata.com/v2alpha1
kind: CheckThreshold
metadata:
    name: spectacular-lichterman-6f1003
spec:
    every: 10m0s
    name: Frost Warning
    query: |-
        from(bucket: "openweathermap")
          |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
          |> filter(fn: (r) => r["_measurement"] == "weather")
          |> filter(fn: (r) => r["_field"] == "temperature")
          |> aggregateWindow(every: 1m, fn: min)
          |> yield(name: "min")
    status: active
    statusMessageTemplate: |-
        Check: ${ r._check_name }
        Temperature ${ r._level }.  ${ r._value } degrees in ${ r.forecast }
    tags:
      - key: frost
        value: "true"
    thresholds:
      - level: WARN
        type: lesser
        value: 4
      - level: CRIT
        type: lesser
        value: 0.1
---
apiVersion: influxdata.com/v2alpha1
kind: CheckThreshold
metadata:
    name: terrifying-khorana-6f1001
spec:
    every: 5m0s
    name: Too Hot
    query: |-
        from(bucket: "openweathermap")
          |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
          |> filter(fn: (r) => r["_measurement"] == "weather")
          |> filter(fn: (r) => r["_field"] == "temp")
          |> aggregateWindow(every: 1m, fn: max)
          |> yield(name: "max")
    status: active
    statusMessageTemplate: 'Check: ${ r._check_name } is: ${ r._level }'
    tags:
      - key: hot
        value: "true"
    thresholds:
      - level: WARN
        type: greater
        value: 30
      - level: CRIT
        type: greater
        value: 35
---
apiVersion: influxdata.com/v2alpha1
kind: NotificationEndpointHTTP
metadata:
    name: busy-sammet-6f1005
spec:
    method: POST
    name: Sample HTTP Endpoint
    status: active
    token:
        secretRef:
            key: 05cd454583209000-token
    type: bearer
    url: https://www.example.com/endpoint
---
apiVersion: influxdata.com/v2alpha1
kind: NotificationRule
metadata:
    name: eager-jemison-6f1009
spec:
    endpointName: busy-sammet-6f1005
    every: 10m0s
    name: Toasty Warm
    statusRules:
      - currentLevel: WARN
    tagRules:
      - key: hot
        operator: equal
        value: "true"
---
apiVersion: influxdata.com/v2alpha1
kind: NotificationRule
metadata:
    name: romantic-goodall-6f1007
spec:
    description: When the temperature is freezing
    endpointName: busy-sammet-6f1005
    every: 10m0s
    name: Frozen
    statusRules:
      - currentLevel: CRIT
    tagRules:
      - key: frost
        operator: equal
        value: "true"
---
apiVersion: influxdata.com/v2alpha1
kind: NotificationRule
metadata:
    name: sweet-elion-6f100d
spec:
    endpointName: busy-sammet-6f1005
    every: 10m0s
    name: Heatwave
    statusRules:
      - currentLevel: CRIT
    tagRules:
      - key: hot
        operator: equal
        value: "true"
---
apiVersion: influxdata.com/v2alpha1
kind: NotificationRule
metadata:
    name: terrifying-mendel-6f100b
spec:
    description: When there's a chance of frozen conditions in shaded areas
    endpointName: busy-sammet-6f1005
    every: 10m0s
    name: Chance of Frost
    statusRules:
      - currentLevel: WARN
    tagRules:
      - key: frost
        operator: equal
        value: "true"
---
apiVersion: influxdata.com/v2alpha1
kind: Variable
metadata:
    name: lucid-blackwell-6f100f
spec:
    language: flux
    name: cityname
    query: |-
        import "influxdata/influxdb/v1"

        v1.tagValues(
          bucket: v.bucket,
          tag: "city"
        )
    type: query
---
apiVersion: influxdata.com/v2alpha1
kind: Variable
metadata:
    name: victorious-lovelace-af1001
spec:
    language: flux
    name: bucket
    query: |-
        buckets()
          |> filter(fn: (r) => r.name !~ /^_/)
          |> rename(columns: {name: "_value"})
          |> keep(columns: ["_value"])
    type: query
---
apiVersion: influxdata.com/v2alpha1
kind: Dashboard
metadata:
    name: rusty-johnson-6f1001
spec:
    associations:
      - kind: Label
        name: upbeat-cray-af1003
      - kind: Label
        name: wondrous-carson-af1005
    charts:
      - height: 1
        kind: Markdown
        name: Name this Cell
        note: |
            This dashboard shows local weather conditions for cities defined in your Telegraf input.
        width: 12
      - colors:
          - hex: '#00C9FF'
            name: laser
            type: background
        decimalPlaces: 2
        height: 2
        kind: Single_Stat
        name: Location
        queries:
          - query: |-
                import "influxdata/influxdb/v1"

                v1.tagValues(
                  bucket: v.bucket,
                  tag: "city"
                )

                  |> filter(fn: (r) => r._value == v.cityname)
        width: 5
        yPos: 1
      - colors:
          - hex: '#00C9FF'
            name: laser
            type: text
        decimalPlaces: 2
        height: 1
        kind: Single_Stat
        name: Current Date
        queries:
          - query: |-
                from(bucket: v.bucket)
                  |> range(start: v.timeRangeStart)
                  |> filter(fn: (r) => r._measurement == "weather")
                  |> filter(fn: (r) => r._field == "today")
                  |> filter(fn: (r) => r.city == v.cityname)
        width: 3
        yPos: 3
      - colors:
          - hex: '#00C9FF'
            name: laser
            type: text
        decimalPlaces: 2
        height: 1
        kind: Single_Stat
        name: Timezone
        queries:
          - query: |-
                import "influxdata/influxdb/v1"

                v1.tagValues(
                  bucket: v.bucket,
                  tag: "timezone",
                  predicate:(r) => r.city == v.cityname
                )
        width: 3
        yPos: 4
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            name: y
            scale: linear
        colors:
          - hex: '#31C0F6'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#A500A5'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#FF7E27'
            name: Nineteen Eighty Four
            type: scale
        geom: line
        height: 2
        kind: Xy
        name: Temperature Forecast
        position: overlaid
        queries:
          - query: |-
                from(bucket: v.bucket)
                  |> range(start: v.timeRangeStart, stop: 168h)
                  |> filter(fn: (r) => r["_measurement"] == "weather")
                  |> filter(fn: (r) => r["_field"] == "temp")
                  |> filter(fn: (r) => r.city == v.cityname)
                  |> drop(columns: ["_start", "_stop"])
                  |> group(columns: ["forecast"], mode:"by")
        width: 12
        xCol: _time
        yCol: _value
        yPos: 5
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            name: y
            scale: linear
        colors:
          - hex: '#31C0F6'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#A500A5'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#FF7E27'
            name: Nineteen Eighty Four
            type: scale
        geom: line
        height: 2
        kind: Xy
        name: UV Index
        position: overlaid
        queries:
          - query: |-
                from(bucket: v.bucket)
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "weather")
                  |> filter(fn: (r) => r["_field"] == "uvi")
                  |> filter(fn: (r) => r.city == v.cityname)
                  |> keep(columns: ["_time", "_value"])
                  //|> aggregateWindow(every: 3h, fn: mean)
                  |> yield(name: "mean")
        width: 4
        xCol: _time
        yCol: _value
        yPos: 7
      - colors:
          - hex: '#00C9FF'
            name: laser
            type: text
        decimalPlaces: 2
        height: 1
        kind: Single_Stat
        name: Sunrise Today
        queries:
          - query: |-
                from(bucket: v.bucket)
                  |> range(start: v.timeRangeStart)
                  |> filter(fn: (r) => r._measurement == "weather")
                  |> filter(fn: (r) => r._field == "sunrise")
                  |> filter(fn: (r) => r.city == v.cityname)
        width: 2
        xPos: 3
        yPos: 3
      - colors:
          - hex: '#00C9FF'
            name: laser
            type: text
        decimalPlaces: 2
        height: 1
        kind: Single_Stat
        name: Sunset Today
        queries:
          - query: |-
                from(bucket: v.bucket)
                  |> range(start: v.timeRangeStart)
                  |> filter(fn: (r) => r._measurement == "weather")
                  |> filter(fn: (r) => r._field == "sunset")
                  |> filter(fn: (r) => r.city == v.cityname)
        width: 2
        xPos: 3
        yPos: 4
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "10"
            name: y
            scale: linear
        colors:
          - hex: '#31C0F6'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#A500A5'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#FF7E27'
            name: Nineteen Eighty Four
            type: scale
        geom: line
        height: 2
        kind: Xy
        name: Humidity Forecast
        position: overlaid
        queries:
          - query: |-
                from(bucket: v.bucket)
                  |> range(start: v.timeRangeStart, stop: 168h)
                  |> filter(fn: (r) => r["_measurement"] == "weather")
                  |> filter(fn: (r) => r["_field"] == "humidity")
                  |> filter(fn: (r) => r.city == v.cityname)
                  |> drop(columns: ["_start", "_stop"])
                  |> group(columns: ["forecast"], mode:"by")
        width: 4
        xCol: _time
        xPos: 4
        yCol: _value
        yPos: 7
      - colors:
          - hex: '#7A65F2'
            name: star
            type: text
          - hex: '#4591ED'
            name: ocean
            type: text
            value: 5
          - hex: '#22ADF6'
            name: pool
            type: text
            value: 10
          - hex: '#32B08C'
            name: viridian
            type: text
            value: 15
          - hex: '#7CE490'
            name: honeydew
            type: text
            value: 20
          - hex: '#FFB94A'
            name: pineapple
            type: text
            value: 25
          - hex: '#F95F53'
            name: curacao
            type: text
            value: 30
          - hex: '#BF3D5E'
            name: ruby
            type: text
            value: 35
        decimalPlaces: 2
        height: 2
        kind: Single_Stat
        name: Current Temperature
        queries:
          - query: |-
                from(bucket: v.bucket)
                  |> range(start: v.timeRangeStart)
                  |> filter(fn: (r) => r._measurement == "weather")
                  |> filter(fn: (r) => r._field == "temp")
                  |> filter(fn: (r) => r.city == v.cityname)
                  |> last()
                  |> yield(name: "last")
        suffix: °c
        width: 3
        xPos: 5
        yPos: 1
      - colors:
          - hex: '#7A65F2'
            name: star
            type: text
          - hex: '#4591ED'
            name: ocean
            type: text
            value: 5
          - hex: '#22ADF6'
            name: pool
            type: text
            value: 10
          - hex: '#32B08C'
            name: viridian
            type: text
            value: 15
          - hex: '#7CE490'
            name: honeydew
            type: text
            value: 20
          - hex: '#FFB94A'
            name: pineapple
            type: text
            value: 25
          - hex: '#F95F53'
            name: curacao
            type: text
            value: 30
          - hex: '#BF3D5E'
            name: ruby
            type: text
            value: 35
        decimalPlaces: 2
        height: 1
        kind: Single_Stat
        name: Feels Like
        queries:
          - query: |-
                from(bucket: v.bucket)
                  |> range(start: v.timeRangeStart)
                  |> filter(fn: (r) => r._measurement == "weather")
                  |> filter(fn: (r) => r._field == "feels_like")
                  |> filter(fn: (r) => r.city == v.cityname)
                  |> last()
                  |> yield(name: "last")
        suffix: °c
        width: 2
        xPos: 5
        yPos: 3
      - colors:
          - hex: '#00C9FF'
            name: laser
            type: text
        decimalPlaces: 2
        height: 1
        kind: Single_Stat
        name: Current Pressure
        queries:
          - query: |-
                from(bucket: v.bucket)
                  |> range(start: v.timeRangeStart)
                  |> filter(fn: (r) => r._measurement == "weather")
                  |> filter(fn: (r) => r._field == "pressure")
                  |> filter(fn: (r) => r.city == v.cityname)
                  |> last()
                  |> yield(name: "last")
        suffix: ' mbar'
        width: 2
        xPos: 5
        yPos: 4
      - colors:
          - hex: '#00C9FF'
            name: laser
            type: text
        decimalPlaces: 2
        height: 1
        kind: Single_Stat
        name: UV Index
        queries:
          - query: |-
                from(bucket: v.bucket)
                  |> range(start: v.timeRangeStart)
                  |> filter(fn: (r) => r._measurement == "weather")
                  |> filter(fn: (r) => r._field == "uvi")
                  |> filter(fn: (r) => r.city == v.cityname)
                  |> last()
                  |> yield(name: "last")
        width: 2
        xPos: 7
        yPos: 3
      - colors:
          - hex: '#00C9FF'
            name: laser
            type: text
        decimalPlaces: 2
        height: 1
        kind: Single_Stat
        name: Current Humidity
        queries:
          - query: |-
                from(bucket: v.bucket)
                  |> range(start: v.timeRangeStart)
                  |> filter(fn: (r) => r._measurement == "weather")
                  |> filter(fn: (r) => r._field == "humidity")
                  |> filter(fn: (r) => r.city == v.cityname)
                  |> last()
                  |> yield(name: "last")
        suffix: '%'
        width: 2
        xPos: 7
        yPos: 4
      - colors:
          - hex: '#ffffff'
            name: white
            type: text
        fieldOptions:
          - displayName: _start
            fieldName: _start
            visible: true
          - displayName: _stop
            fieldName: _stop
            visible: true
          - displayName: _time
            fieldName: _time
            visible: true
          - displayName: _value
            fieldName: _value
            visible: true
          - displayName: _field
            fieldName: _field
            visible: true
          - displayName: _measurement
            fieldName: _measurement
            visible: true
          - displayName: city
            fieldName: city
            visible: true
          - displayName: forecast
            fieldName: forecast
            visible: true
          - displayName: host
            fieldName: host
            visible: true
          - displayName: lat
            fieldName: lat
            visible: true
          - displayName: lon
            fieldName: lon
            visible: true
          - displayName: timezone
            fieldName: timezone
            visible: true
          - displayName: timezone_offset
            fieldName: timezone_offset
            visible: true
        height: 2
        kind: Table
        name: Forecast
        queries:
          - query: |-
                from(bucket: v.bucket)
                  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
                  |> filter(fn: (r) => r["_measurement"] == "weather")
                  |> filter(fn: (r) => r["_field"] == "description")
                  |> filter(fn: (r) => r.city == v.cityname)
                  |> keep(columns: ["_value", "forecast" ,"city"])
                  |> last()
                  |> group()
        tableOptions:
            verticalTimeAxis: true
        timeFormat: YYYY-MM-DD HH:mm:ss
        width: 4
        xPos: 8
        yPos: 1
      - axes:
          - base: "10"
            name: x
            scale: linear
          - base: "2"
            name: y
            scale: linear
        colors:
          - hex: '#31C0F6'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#A500A5'
            name: Nineteen Eighty Four
            type: scale
          - hex: '#FF7E27'
            name: Nineteen Eighty Four
            type: scale
        geom: line
        height: 2
        kind: Xy
        name: Pressure Forecast
        position: overlaid
        queries:
          - query: |-
                from(bucket: v.bucket)
                  |> range(start: v.timeRangeStart, stop: 168h)
                  |> filter(fn: (r) => r["_measurement"] == "weather")
                  |> filter(fn: (r) => r["_field"] == "pressure")
                  |> filter(fn: (r) => r.city == v.cityname)
                  |> drop(columns: ["_start", "_stop"])
                  |> group(columns: ["forecast"], mode:"by")
        width: 4
        xCol: _time
        xPos: 8
        yCol: _value
        yPos: 7
      - colors:
          - hex: '#FFD255'
            name: thunder
            type: text
          - hex: '#32B08C'
            name: viridian
            type: text
            value: 30
          - hex: '#ffffff'
            name: white
            type: text
            value: 70
        decimalPlaces: 2
        height: 1
        kind: Single_Stat
        name: Cloud Cover
        queries:
          - query: |-
                from(bucket: v.bucket)
                  |> range(start: v.timeRangeStart)
                  |> filter(fn: (r) => r._measurement == "weather")
                  |> filter(fn: (r) => r._field == "clouds")
                  |> filter(fn: (r) => r.city == v.cityname)
                  |> last()
                  |> yield(name: "last")
        suffix: '%'
        width: 1
        xPos: 9
        yPos: 3
      - colors:
          - hex: '#4591ED'
            name: ocean
            type: text
          - hex: '#00C9FF'
            name: laser
            type: text
            value: 5
          - hex: '#7A65F2'
            name: star
            type: text
            value: 10
          - hex: '#32B08C'
            name: viridian
            type: text
            value: 15
          - hex: '#7CE490'
            name: honeydew
            type: text
            value: 20
          - hex: '#FFB94A'
            name: pineapple
            type: text
            value: 25
          - hex: '#F95F53'
            name: curacao
            type: text
            value: 30
          - hex: '#BF3D5E'
            name: ruby
            type: text
            value: 35
        decimalPlaces: 2
        height: 1
        kind: Single_Stat
        name: Dew Point
        queries:
          - query: |-
                from(bucket: v.bucket)
                  |> range(start: v.timeRangeStart)
                  |> filter(fn: (r) => r._measurement == "weather")
                  |> filter(fn: (r) => r._field == "dew_point")
                  |> filter(fn: (r) => r.city == v.cityname)
                  |> last()
                  |> yield(name: "last")
        suffix: °c
        width: 1
        xPos: 9
        yPos: 4
      - colors:
          - hex: '#00C9FF'
            name: laser
            type: text
        decimalPlaces: 2
        height: 1
        kind: Single_Stat
        name: Wind Direction
        queries:
          - query: |-
                from(bucket: v.bucket)
                  |> range(start: v.timeRangeStart)
                  |> filter(fn: (r) => r._measurement == "weather")
                  |> filter(fn: (r) => r._field == "wind_deg")
                  |> filter(fn: (r) => r.city == v.cityname)
                  |> last()
                  |> yield(name: "last")
        suffix: °
        width: 2
        xPos: 10
        yPos: 3
      - colors:
          - hex: '#00C9FF'
            name: laser
            type: text
        decimalPlaces: 2
        height: 1
        kind: Single_Stat
        name: Wind Speed
        queries:
          - query: |-
                from(bucket: v.bucket)
                  |> range(start: v.timeRangeStart)
                  |> filter(fn: (r) => r._measurement == "weather")
                  |> filter(fn: (r) => r._field == "wind_speed")
                  |> filter(fn: (r) => r.city == v.cityname)
                  |> last()
                  |> yield(name: "last")
        suffix: ' m/s'
        width: 2
        xPos: 10
        yPos: 4
    description: A collection of interesting visualizations for monitoring your local
        weather, using a Python script to return more data than the openweathermap
        Telegraf input
    name: Local Weather Forecast
---
apiVersion: influxdata.com/v2alpha1
kind: Telegraf
metadata:
    name: local_weather_forecast
spec:
    config: |
        # This Telegraf config runs a Python script to retrieve weather forcasts from any city in the world every 30 minutes.
        #  It will output to InfluxDB v2 and to stdout
        #
        # Environment variables required:
        #  INFLUX_URL - the URL of your instance of InfluxDB v2
        #  INFLUX_TOKEN - a token you've previously created in InfluxDB v2 for the use of this Telegraf
        #  INFLUX_ORG - which Organisation name to use in InfluxDB
        #  INFLUX_BUCKET - which bucket to store data in
        #  OPENWEATHERMAP_CITY_ID - the city id of the city from where you want to retrieve weather data
        #  OPENWEATHERMAP_UNITS - whether you want metric (Celcius), imperial (Fahrenheit) or normal (Kelvin) temperatures
        #  OPENWEATHERMAP_APP_ID - the API ID you've created in OpenWeatherMap for this

        [global_tags]

        [agent]
          interval = "10s"
          round_interval = true
          metric_batch_size = 1000
          metric_buffer_limit = 10000

          collection_jitter = "0s"
          flush_interval = "10s"
          flush_jitter = "0s"

          precision = ""
          debug = false
          quiet = true
          hostname = ""
          omit_hostname = false

        [[outputs.influxdb_v2]]
          urls = ["$INFLUX_URL"]
          token = "$INFLUX_TOKEN"
          organization = "$INFLUX_ORG"
          bucket = "$INFLUX_BUCKET"

        [[outputs.file]]
          files = ["stdout"]

        [[inputs.exec]]
          commands = [
            "python3 onecall.py \"$OPENWEATHERMAP_CITY_ID\" \"$OPENWEATHERMAP_UNITS\" \"$OPENWEATHERMAP_APP_ID\""
          ]
          interval = "30m"
          timeout = "5s"
          data_format = "influx"
